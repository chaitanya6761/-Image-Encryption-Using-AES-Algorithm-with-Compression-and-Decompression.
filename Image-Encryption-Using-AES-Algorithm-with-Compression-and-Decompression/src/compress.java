
import CLZWCompressor.CLZWEncoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.zip.GZIPOutputStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import java.io.FileNotFoundException;
import CCosmoCompressor.*;
import CHuffmanCompressor.*;
import java.util.logging.Level;
import java.util.logging.Logger;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sony
 */
public class compress extends javax.swing.JFrame {

    /**
     * Creates new form compress
     */
    public compress() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        but_browse = new javax.swing.JButton();
        file_path = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        box = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        but_saveAs = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        status = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COMPRESS");

        but_browse.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        but_browse.setText("BROWSE");
        but_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_browseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("IMAGE LOCATION :");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("         ALGORITHM :");

        box.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CHuffman Compressor", "CRLE Compressor", "CGZip Compressor", "CLZW Compressor", "CCosmo Compressor", " " }));
        box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("         SAVE_AS :");

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setText("COMPRESS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        status.setColumns(20);
        status.setRows(5);
        jScrollPane1.setViewportView(status);

        jLabel4.setText("STATUS :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(file_path))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(box, 0, 306, Short.MAX_VALUE)
                                    .addComponent(but_saveAs)
                                    .addComponent(jScrollPane1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_browse, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_browse)
                    .addComponent(file_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(but_saveAs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(579, 414));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void but_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_browseActionPerformed
       FileFilter filter=new FileNameExtensionFilter("JPG & GIF Images", "jpg", "gif", "png");      
        JFileChooser chooser = new JFileChooser("D:\\FProject\\Images");
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        File f=chooser.getSelectedFile();// 
        String filename=f.getAbsolutePath();
        file_path.setText(filename);   // TODO add your handling code here:
    }//GEN-LAST:event_but_browseActionPerformed

    private void boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxActionPerformed
        
    }//GEN-LAST:event_boxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String gsummary="";
        String save=but_saveAs.getText();
        int flag=0;
        if(box.getSelectedItem().equals("CGZip Compressor") )
        {
            try{
		FileInputStream in = new FileInputStream(file_path.getText());
		GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream("D:\\FProject\\Compressed Images\\CGZip Compressor\\" + save + ".gz"));
               int fileLen = in.available();
               
               gsummary += "Original Size : " + fileLen + "\n";

               if(fileLen == 0 ) throw new Exception("Source File Empty!");
               byte[] buf = new byte[1024];
		int len;
		while ((len = in.read(buf)) > 0) {
		out.write(buf, 0, len);
		}
		in.close();
		out.finish();
		out.close();
                long outputFilelen =  new File("D:\\FProject\\Compressed Images\\CGZip Compressor\\" + save + ".gz").length();
		float cratio = (float)(((outputFilelen)*100)/(float)fileLen);
		gsummary += ("Compressed File Size : " + outputFilelen + "\n");
		gsummary += ("Compression Ratio : " + cratio + "%" + "\n");
                
                System.out.println(gsummary);
                status.setText(gsummary);

                }
            catch(Exception e)
            {
                flag=1;
            }
                 if(flag!=1)
                 {
                     JOptionPane.showMessageDialog(null,"File is Successfully Compressed");
                     dispose();
                     new selector().setVisible(true);
                 }

        }    
        
             else if(box.getSelectedItem().equals("CRLE Compressor") )
              {
                int MAXCHARS = 256;
	        int ESCAPECHAR = 255;
	        String rleSignature = "RLE";
	        int toleranceFrequency = 4;
                long fileLen;
                int flag1=0;

                
                 FileInputStream fin;
	         FileOutputStream fout;
	         BufferedInputStream in = null;
	         BufferedOutputStream out = null;
                 
                 try{
                     fin = new FileInputStream(file_path.getText());
			in = new BufferedInputStream(fin);
                        
                        fout = new FileOutputStream("D:\\FProject\\Compressed Images\\CRLECompressor\\" + save + ".rle");
			out = new BufferedOutputStream(fout);


                 }
                   catch(FileNotFoundException e)
                   {
			flag1=1;
		    }


	         try{
		fileLen = in.available();
                gsummary += "Original Size : " + fileLen + "\n";

		if(fileLen == 0) 
                throw new Exception("\nFile is Empty!");
                
                int i = 0;
		int count = 0;
		int currentCh = 0 ,prevCh = 0;
                
                out.write(rleSignature.getBytes());
		
		prevCh = in.read();
		i++;
		count = 1;
                
                while(i < fileLen){
			
			do{
				currentCh = in.read();
				i++;
				if(prevCh == currentCh ) count++;
				if(count >= 255) break;
			}while(prevCh == currentCh && i < fileLen);
                        
                        if(count >= toleranceFrequency || prevCh == ESCAPECHAR){
				out.write(ESCAPECHAR);
				out.write((char)prevCh);
				out.write((char)count);
			}
                        else{
				for(int k=0;k<count;k++) 
                                    out.write(prevCh);
				
			}
			
			if(prevCh == currentCh) count = 0; else count = 1;
			prevCh = currentCh;
				
			
			
		}
		out.close();
               long outputFilelen = new File("D:\\FProject\\Compressed Images\\CRLECompressor\\" + save + ".rle").length();
		float cratio = (float)(outputFilelen*100)/(float)fileLen;
		gsummary += "Compressed File Size : " + outputFilelen + "\n";
		gsummary += "Compressed Ratio : " + cratio + "% \n";
                status.setText(gsummary);
                
		
                
                }
                 catch(Exception e){
			flag1=1;
		}

                if(flag1!=1)
                 {
                     JOptionPane.showMessageDialog(null,"File is Successfully Compressed");
                     dispose();
                     new selector().setVisible(true);
                 }
                System.out.println(gsummary);
                
   
              }
        
              else if(box.getSelectedItem().equals("CLZW Compressor") )
              { 
                  
                                                CLZWEncoder lzwe = new	CLZWEncoder(file_path.getText());
            try {
                lzwe.encodeFile();
            } catch (Exception ex) {
                Logger.getLogger(compress.class.getName()).log(Level.SEVERE, null, ex);
            }
								gsummary += lzwe.getSummary();
                                                                status.setText(gsummary);
	
	 }
        else if(box.getSelectedItem().equals("CCosmo Compressor") )
              {
                  CCosmoEncoder ce = new CCosmoEncoder(file_path.getText(),file_path.getText() + ".cos");
            try {
                ce.encodeFile();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }

              }
        
        
        if(box.getSelectedItem().equals("CHuffman Compressor") )
        {
            CHuffmanEncoder he = new	CHuffmanEncoder(file_path.getText());
            try {
                he.encodeFile();
            } catch (Exception ex) {
                Logger.getLogger(compress.class.getName()).log(Level.SEVERE, null, ex);
            }
								gsummary += he.getSummary();
                                                                status.setText(gsummary);

        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(compress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(compress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(compress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(compress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new compress().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox box;
    private javax.swing.JButton but_browse;
    private javax.swing.JTextField but_saveAs;
    private javax.swing.JTextField file_path;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea status;
    // End of variables declaration//GEN-END:variables
}
